name: Download Satellite Image (Debug Mode)

on:
  workflow_dispatch:  # 仅手动触发便于调试

jobs:
  download-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup debug environment
        run: |
          # 安装调试工具
          sudo apt-get update
          sudo apt-get install -y jq
          pip install --upgrade pip

      - name: Debug Step 1 - Download JS file
        run: |
          JS_URL="https://www.cwa.gov.tw/Data/js/obs_img/Observe_sat.js"
          echo "▶️ 正在下载 JS 文件..."
          curl -v -s $JS_URL -o satimg.js
          
          echo "🔍 文件内容前100字符:"
          head -c 100 satimg.js
          echo -e "\n\n📦 文件大小:" $(wc -c < satimg.js) "bytes"
          echo "✅ 下载完成"

      - name: Debug Step 2 - Inspect JS structure
        run: |
          echo "🔎 检查 JS 文件结构..."
          echo "1. 查找 SatImg 定义:"
          grep -n "var SatImg" satimg.js || echo "❌ 未找到 SatImg 定义"
          
          echo -e "\n2. 检查 Tab4 结构:"
          grep -A 10 "Tab4" satimg.js || echo "❌ 未找到 Tab4 定义"
          
          echo -e "\n3. 检查 img 字段示例:"
          grep -m 3 "img" satimg.js || echo "❌ 未找到 img 字段"

      - name: Debug Step 3 - Fixed Python parser
  run: |
    cat << 'EOF' > fixed_parser.py
    import re, json, sys

    def debug_print(label, content):
        print(f"🔧 [DEBUG] {label}:")
        print(content)
        print("-"*50)

    try:
        # 读取文件
        with open("satimg.js") as f:
            js = f.read()
        debug_print("原始JS", js[:200] + "...")
        
        # 改进的多行匹配
        match = re.search(r"var SatImg\s*=\s*({[\s\S]*?});", js)
        if not match:
            print("❌ 错误：未匹配到SatImg对象")
            debug_print("建议", "检查JS文件是否包含完整的var SatImg = {...};")
            sys.exit(1)
        
        json_str = match.group(1)
        debug_print("提取的对象", json_str[:200] + "...")
        
        # 转换JS对象为合法JSON
        json_str = (
            json_str.replace("'", '"')
            .replace("True", "true")
            .replace("False", "false")
        )
        json_str = re.sub(r"([\{,])\s*([a-zA-Z_]\w*)\s*:", r'\1"\2":', json_str)
        
        debug_print("转换后的JSON", json_str[:200] + "...")
        
        # 解析并获取目标值
        data = json.loads(json_str)
        img_path = data["Tab4"]["Area1"]["size0"]["C"]["0"]["img"]
        print(f"::set-output name=image_url::https://www.cwa.gov.tw/Data/satellite/{img_path}")
        print(f"::set-output name=image_name::{img_path.split('/')[-1]}")
        
    except Exception as e:
        print(f"❌ 解析失败: {type(e).__name__}: {e}")
        sys.exit(1)
    EOF

    python3 fixed_parser.py


      - name: Debug Step 4 - Run parser
        id: parser
        run: |
          echo "▶️ 开始执行解析器..."
          python3 debug_parser.py
          echo "✅ 解析完成"
          
          # 验证输出
          echo -e "\n🔄 输出变量检查:"
          echo "image_url: ${{ steps.parser.outputs.image_url }}"
          echo "image_name: ${{ steps.parser.outputs.image_name }}"

      - name: Debug Step 5 - Download test
        if: steps.parser.outputs.image_url
        run: |
          echo "▶️ 测试下载图片..."
          mkdir -p debug_images
          curl -v -o "debug_images/${{ steps.parser.outputs.image_name }}" \
            "${{ steps.parser.outputs.image_url }}"
          
          echo -e "\n📊 下载结果:"
          ls -lh debug_images/
          file "debug_images/${{ steps.parser.outputs.image_name }}"
          echo "✅ 下载测试完成"

      - name: Debug Report
        if: always()
        run: |
          echo -e "\n📝 调试报告:"
          echo "1. JS文件下载: ${{ steps['Debug Step 1 - Download JS file'].outcome }}"
          echo "2. 结构检查: ${{ steps['Debug Step 2 - Inspect JS structure'].outcome }}"
          echo "3. 解析器执行: ${{ steps['Debug Step 4 - Run parser'].outcome }}"
          echo "4. 下载测试: ${{ steps['Debug Step 5 - Download test'].outcome || '未执行' }}"
          
          echo -e "\n🔗 图片URL: ${{ steps.parser.outputs.image_url || '未生成' }}"
          echo "🖼️ 图片名称: ${{ steps.parser.outputs.image_name || '未生成' }}"
